extends layout

block content
    div.content-wrapper
        div.content
            h1= 'Test: ' + test.title
            div(class="current-support-container "+test.core_support_string.replace(" ", "-"))
                p= 'Current support: ' + test.core_support_string

            p= test.description

            if (test.type === "aam" || test.type === "custom")
                h2 Test HTML
                pre
                    code= testHTML

            h2 On this page
            ul
                li
                    a(href="#run-test") Run the test
                li
                    a(href="#support-tables") Support tables
                li
                    a(href="#history") History

            h2(id="run-test") Run the test

            button(aria-expanded="false" aria-controls="run-test-container").toggle-run-test-container Toggle test instructions

            div(id="run-test-container")
                h3 What are you testing with?
                form.testing-pref
                    label(for="combination") Select your testing combination
                    select(id="combination")
                        optgroup(label="Core combinations")
                            each at in ATBrowsers.core_at
                                each browser_id in ATBrowsers.at[at].core_browsers
                                        option(value=at + '/' + browser_id)= ATBrowsers.at[at].short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (core)'

                        optgroup(label="Extended combinations")
                            each at, at_id in ATBrowsers.at
                                each browser_id in ATBrowsers.at[at_id].core_browsers
                                    if (ATBrowsers.extended_at.includes(at_id))
                                        option(value=at_id + '/' + browser_id)= at.short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (extended)'
                                each browser_id in ATBrowsers.at[at_id].extended_browsers
                                    option(value=at_id + '/' + browser_id)= at.short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (extended)'
                    button set
                div(id="testing-pref-results")

                div.call-out
                    h3 Make sure everything is up to date
                    p Always make sure that your OS, Browser, and Assistive technology are up to date with the latest production versions before submitting test results. Also make sure that your assistive technology is set to factory defaults.

                p Please be sure to read the full instructions before completing the test.

                if (test.type === "aam")
                    if (test.supports_sr)
                        h3 Screen Reader Instructions

                        include test-case/locate-note.pug

                        ol
                            li Launch the screen reader that you want to test with.
                            li Navigate to the test page iframe (after these instructions) or #[a(href='/tests/html/' + test.id + '.html') open the test page].
                            li= "Locate the target element. The CSS selector for the target is: "
                                strong= test.css_target
                            if test.sr_instructions
                                each instruction in test.sr_instructions
                                    li= instruction
                            else
                            li The test passes if the screen reader output includes the expected name, role, and properties (the exact order and vocabulary will differ between screen readers). The expected name, role, and properties can be found after the instructions. If some commands work and others do not, the test should be marked as 'partial support'.
                            li Use the form to create an issue for the given browser/screen reader combination. Please include detailed notes about what commands were used.

                    if (test.supports_vc)
                        h3 Voice Command Instructions
                        ol
                            li Launch the Voice Command software that you want to test with.
                            li Navigate to the test page iframe (after these instructions) or #[a(href='/tests/html/' + test.id + '.html') open the test page].
                            if test.vc_instructions
                                each instruction in test.vc_instructions
                                    li= instruction
                            else
                                li= "Say \"click "+ test.expected.accessible_name +"\""
                                li The test passes if the Voice Command software is able to locate and activate the target element.
                                li Use the form to create an issue for the given browser/voice command software combination.

                    h3 Expected name, role, and properties
                    table
                        tr
                            th(scope="row") Role
                            td= test.expected.role
                        tr
                            th(scope="row") Accessible Name
                            td= test.expected.accessible_name
                        tr
                            th(scope="row") Accessible Description
                            td= test.expected.accessible_description || '(none)'
                        each state_or_property in test.expected.states_and_properties
                            th(scope="row")= state_or_property.title
                            td= state_or_property.value

                    p(class="note") Note: Screen readers will usually announce an element in the format: <span class='inline-quote'>"&lt;role&gt;, &lt;accessible name&gt;, &lt;other states and properties&gt;, &lt;accessible description&gt;"</span>. The order in which the name, role, and properties are announced might differ between screen readers. The exact vocabulary used will also differ.

                    h3 Test page
                    iframe(src='/tests/html/' + test.id + '.html' aria-label="the test page")

                else if (test.type === "custom")
                    if (test.supports_sr)
                        h3 Screen Reader Instructions

                        include test-case/locate-note.pug

                        ol
                            li Launch the screen reader that you want to test with.
                            li Navigate to the test page iframe (after these instructions) or #[a(href='/tests/html/' + test.id + '.html') open the test page].
                            each instruction in test.sr_instructions
                                li= instruction

                    if (test.supports_vc)
                        h3 Voice Command Instructions
                        ol
                            li Launch the Voice Command software that you want to test with.
                            li Navigate to the test page iframe (after these instructions) or #[a(href='/tests/html/' + test.id + '.html') open the test page].
                            each instruction in test.vc_instructions
                                li= instruction

                    h3 Test page
                    iframe(src='/tests/html/' + test.id + '.html' aria-label="the test page")

                else if (test.type === "external")
                    p This is an external test.
                    a(href=test.url.url)= test.url.title

                h3 Submit your findings
                p Your findings can be submitted via a GitHub issue with this form. Some selections will be saved to speed up future submissions.
                form.submit-test-result.stacked-form
                    input(type="hidden" name="title" value=test.id)

                    div(id="error_container")

                    div.control
                        label(for="support") Test result (required)
                        select(name="support" id="support" aria-required="true")
                            option(value="y") Passed
                            option(value="p") Partial (please explain in notes)
                            option(value="n") Failed
                    div.control
                        label(for="at") AT used (required)
                        select(name="at" id="at" aria-required="true")
                            each at, at_id in ATBrowsers.at
                                option(value=at_id)=at.title
                    div.control
                        label(for="at_version") AT Version (required)
                        input(type="text" name="at_version" id="at_version" aria-required="true")
                    div.control
                        label(for="os_version") OS Version (required)
                        input(type="text" name="os_version" id="os_version" aria-required="true")
                    div.control
                        label(for="browser") Browser used (required)
                        select(name="browser" id="browser" aria-required="true")
                            each browser, browser_id in ATBrowsers.browsers
                                option(value=browser_id)=browser.title
                    div.control
                        label(for="browser_version") Browser Version (required)
                        input(type="text" name="browser_version" id="browser_version" aria-required="true")
                    div.control
                        label(for="output") AT Output
                        input(type="text" name="output" id="output")
                    div.control
                        label(for="notes") Any extra info
                        textarea(id="notes" name="notes")
                    div.control
                        button Create GitHub Issue

            h2(id="support-tables") Support tables

            h3(id="core-support") Core support
            p These are common combinations.
            table(aria-labelledby="core-support")
                tr
                    th AT
                    th Browser
                    th Support
                    th Action
                each at in ATBrowsers.core_at
                    each browser in ATBrowsers.at[at].core_browsers
                        tr
                            td= ATBrowsers.at[at].title
                                if test.at[at].browsers[browser].at_version
                                    span= ' ' + test.at[at].browsers[browser].at_version
                            td= ATBrowsers.browsers[browser].title
                                if test.at[at].browsers[browser].browser_version
                                    span= ' ' + test.at[at].browsers[browser].browser_version
                            td(class='support-case '+test.at[at].browsers[browser].support)= test.at[at].browsers[browser].support
                            td
                                a(href="/tests/"+test.id+"/"+at+"/"+browser) More information

            h3(id="extended-support") Extended Support
            p These are less common combinations
            table(aria-labelledby="extended-support")
                tr
                    th AT
                    th Browser
                    th Support
                    th Action
                each at in ATBrowsers.at
                    - var browsers = at.extended_browsers
                    if ATBrowsers.extended_at.includes(at.id)
                        - var browsers = browsers.concat(at.core_browsers)
                    each browser in browsers
                        tr
                            td= at.title
                                if test.at[at.id].browsers[browser].at_version
                                    span= ' ' + test.at[at.id].browsers[browser].at_version
                            td= ATBrowsers.browsers[browser].title
                                if test.at[at.id].browsers[browser].browser_version
                                    span= ' ' + test.at[at.id].browsers[browser].browser_version
                            td= test.at[at.id].browsers[browser].support
                            td
                                a(href="/tests/" + test.id + "/" + at.id + "/" + browser) More information
            h2(id="history") History
            ul
                each record in test.history
                    li
                        strong= record.date + ' '
                        span= record.message

        div.sidebar
            h2 Related Features
            p This test is found in the following features:
            ul
                each featureInfo in features
                    li
                        a(href="/tech/" + featureInfo.techId + '/' + featureInfo.featureId) #{featureInfo.title}

            h2 Is something not right?
            p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.

            ul
                li
                    a(href='https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title='+test.id+'&labels=test%20case') There is a problem with this test case (the test file, procedure, expected results, etc)
                li
                    p Use the support tables to view details and report issues or changes.

    script(src="/js/feature-test.js")